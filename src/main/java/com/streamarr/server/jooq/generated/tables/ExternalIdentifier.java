/*
 * This file is generated by jOOQ.
 */
package com.streamarr.server.jooq.generated.tables;


import com.streamarr.server.jooq.generated.Indexes;
import com.streamarr.server.jooq.generated.Keys;
import com.streamarr.server.jooq.generated.Public;
import com.streamarr.server.jooq.generated.enums.ExternalSourceType;
import com.streamarr.server.jooq.generated.tables.records.ExternalIdentifierRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExternalIdentifier extends TableImpl<ExternalIdentifierRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.external_identifier</code>
     */
    public static final ExternalIdentifier EXTERNAL_IDENTIFIER = new ExternalIdentifier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExternalIdentifierRecord> getRecordType() {
        return ExternalIdentifierRecord.class;
    }

    /**
     * The column <code>public.external_identifier.id</code>.
     */
    public final TableField<ExternalIdentifierRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.external_identifier.created_on</code>.
     */
    public final TableField<ExternalIdentifierRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.external_identifier.created_by</code>.
     */
    public final TableField<ExternalIdentifierRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.external_identifier.last_modified_on</code>.
     */
    public final TableField<ExternalIdentifierRecord, OffsetDateTime> LAST_MODIFIED_ON = createField(DSL.name("last_modified_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.external_identifier.last_modified_by</code>.
     */
    public final TableField<ExternalIdentifierRecord, UUID> LAST_MODIFIED_BY = createField(DSL.name("last_modified_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.external_identifier.external_source_type</code>.
     */
    public final TableField<ExternalIdentifierRecord, ExternalSourceType> EXTERNAL_SOURCE_TYPE = createField(DSL.name("external_source_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.streamarr.server.jooq.generated.enums.ExternalSourceType.class), this, "");

    /**
     * The column <code>public.external_identifier.external_id</code>.
     */
    public final TableField<ExternalIdentifierRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.external_identifier.entity_id</code>.
     */
    public final TableField<ExternalIdentifierRecord, UUID> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.UUID, this, "");

    private ExternalIdentifier(Name alias, Table<ExternalIdentifierRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExternalIdentifier(Name alias, Table<ExternalIdentifierRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.external_identifier</code> table reference
     */
    public ExternalIdentifier(String alias) {
        this(DSL.name(alias), EXTERNAL_IDENTIFIER);
    }

    /**
     * Create an aliased <code>public.external_identifier</code> table reference
     */
    public ExternalIdentifier(Name alias) {
        this(alias, EXTERNAL_IDENTIFIER);
    }

    /**
     * Create a <code>public.external_identifier</code> table reference
     */
    public ExternalIdentifier() {
        this(DSL.name("external_identifier"), null);
    }

    public <O extends Record> ExternalIdentifier(Table<O> child, ForeignKey<O, ExternalIdentifierRecord> key) {
        super(child, key, EXTERNAL_IDENTIFIER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EXTERNAL_IDENTIFIER_ID_IDX);
    }

    @Override
    public UniqueKey<ExternalIdentifierRecord> getPrimaryKey() {
        return Keys.EXTERNAL_IDENTIFIER_PKEY;
    }

    @Override
    public List<ForeignKey<ExternalIdentifierRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXTERNAL_IDENTIFIER__FK_BASE_COLLECTABLE);
    }

    private transient BaseCollectable _baseCollectable;

    /**
     * Get the implicit join path to the <code>public.base_collectable</code>
     * table.
     */
    public BaseCollectable baseCollectable() {
        if (_baseCollectable == null)
            _baseCollectable = new BaseCollectable(this, Keys.EXTERNAL_IDENTIFIER__FK_BASE_COLLECTABLE);

        return _baseCollectable;
    }

    @Override
    public ExternalIdentifier as(String alias) {
        return new ExternalIdentifier(DSL.name(alias), this);
    }

    @Override
    public ExternalIdentifier as(Name alias) {
        return new ExternalIdentifier(alias, this);
    }

    @Override
    public ExternalIdentifier as(Table<?> alias) {
        return new ExternalIdentifier(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalIdentifier rename(String name) {
        return new ExternalIdentifier(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalIdentifier rename(Name name) {
        return new ExternalIdentifier(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalIdentifier rename(Table<?> name) {
        return new ExternalIdentifier(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, OffsetDateTime, UUID, OffsetDateTime, UUID, ExternalSourceType, String, UUID> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super OffsetDateTime, ? super UUID, ? super OffsetDateTime, ? super UUID, ? super ExternalSourceType, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super OffsetDateTime, ? super UUID, ? super OffsetDateTime, ? super UUID, ? super ExternalSourceType, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
