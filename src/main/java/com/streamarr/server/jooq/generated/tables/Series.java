/*
 * This file is generated by jOOQ.
 */
package com.streamarr.server.jooq.generated.tables;


import com.streamarr.server.jooq.generated.Keys;
import com.streamarr.server.jooq.generated.Public;
import com.streamarr.server.jooq.generated.tables.records.SeriesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Series extends TableImpl<SeriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.series</code>
     */
    public static final Series SERIES = new Series();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeriesRecord> getRecordType() {
        return SeriesRecord.class;
    }

    /**
     * The column <code>public.series.id</code>.
     */
    public final TableField<SeriesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.series.backdrop_path</code>.
     */
    public final TableField<SeriesRecord, String> BACKDROP_PATH = createField(DSL.name("backdrop_path"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.series.poster_path</code>.
     */
    public final TableField<SeriesRecord, String> POSTER_PATH = createField(DSL.name("poster_path"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.series.logo_path</code>.
     */
    public final TableField<SeriesRecord, String> LOGO_PATH = createField(DSL.name("logo_path"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.series.content_rating</code>.
     */
    public final TableField<SeriesRecord, String> CONTENT_RATING = createField(DSL.name("content_rating"), SQLDataType.CLOB, this, "");

    private Series(Name alias, Table<SeriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Series(Name alias, Table<SeriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.series</code> table reference
     */
    public Series(String alias) {
        this(DSL.name(alias), SERIES);
    }

    /**
     * Create an aliased <code>public.series</code> table reference
     */
    public Series(Name alias) {
        this(alias, SERIES);
    }

    /**
     * Create a <code>public.series</code> table reference
     */
    public Series() {
        this(DSL.name("series"), null);
    }

    public <O extends Record> Series(Table<O> child, ForeignKey<O, SeriesRecord> key) {
        super(child, key, SERIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SeriesRecord> getPrimaryKey() {
        return Keys.SERIES_PKEY;
    }

    @Override
    public List<ForeignKey<SeriesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERIES__FK_SERIES);
    }

    private transient BaseCollectable _baseCollectable;

    /**
     * Get the implicit join path to the <code>public.base_collectable</code>
     * table.
     */
    public BaseCollectable baseCollectable() {
        if (_baseCollectable == null)
            _baseCollectable = new BaseCollectable(this, Keys.SERIES__FK_SERIES);

        return _baseCollectable;
    }

    @Override
    public Series as(String alias) {
        return new Series(DSL.name(alias), this);
    }

    @Override
    public Series as(Name alias) {
        return new Series(alias, this);
    }

    @Override
    public Series as(Table<?> alias) {
        return new Series(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Series rename(String name) {
        return new Series(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Series rename(Name name) {
        return new Series(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Series rename(Table<?> name) {
        return new Series(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
