/*
 * This file is generated by jOOQ.
 */
package com.streamarr.server.jooq.generated.tables;


import com.streamarr.server.jooq.generated.Indexes;
import com.streamarr.server.jooq.generated.Keys;
import com.streamarr.server.jooq.generated.Public;
import com.streamarr.server.jooq.generated.enums.ExternalAgentStrategy;
import com.streamarr.server.jooq.generated.enums.LibraryBackend;
import com.streamarr.server.jooq.generated.enums.LibraryStatus;
import com.streamarr.server.jooq.generated.enums.MediaType;
import com.streamarr.server.jooq.generated.tables.records.LibraryRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Library extends TableImpl<LibraryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.library</code>
     */
    public static final Library LIBRARY = new Library();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LibraryRecord> getRecordType() {
        return LibraryRecord.class;
    }

    /**
     * The column <code>public.library.id</code>.
     */
    public final TableField<LibraryRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.library.created_on</code>.
     */
    public final TableField<LibraryRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.library.created_by</code>.
     */
    public final TableField<LibraryRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.library.last_modified_on</code>.
     */
    public final TableField<LibraryRecord, OffsetDateTime> LAST_MODIFIED_ON = createField(DSL.name("last_modified_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.library.last_modified_by</code>.
     */
    public final TableField<LibraryRecord, UUID> LAST_MODIFIED_BY = createField(DSL.name("last_modified_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.library.filepath</code>.
     */
    public final TableField<LibraryRecord, String> FILEPATH = createField(DSL.name("filepath"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.library.name</code>.
     */
    public final TableField<LibraryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.library.scan_started_on</code>.
     */
    public final TableField<LibraryRecord, OffsetDateTime> SCAN_STARTED_ON = createField(DSL.name("scan_started_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.library.scan_completed_on</code>.
     */
    public final TableField<LibraryRecord, OffsetDateTime> SCAN_COMPLETED_ON = createField(DSL.name("scan_completed_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.library.status</code>.
     */
    public final TableField<LibraryRecord, LibraryStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.streamarr.server.jooq.generated.enums.LibraryStatus.class), this, "");

    /**
     * The column <code>public.library.backend</code>.
     */
    public final TableField<LibraryRecord, LibraryBackend> BACKEND = createField(DSL.name("backend"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.streamarr.server.jooq.generated.enums.LibraryBackend.class), this, "");

    /**
     * The column <code>public.library.type</code>.
     */
    public final TableField<LibraryRecord, MediaType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.streamarr.server.jooq.generated.enums.MediaType.class), this, "");

    /**
     * The column <code>public.library.external_agent_strategy</code>.
     */
    public final TableField<LibraryRecord, ExternalAgentStrategy> EXTERNAL_AGENT_STRATEGY = createField(DSL.name("external_agent_strategy"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'TMDB'::external_agent_strategy"), SQLDataType.VARCHAR)).asEnumDataType(com.streamarr.server.jooq.generated.enums.ExternalAgentStrategy.class), this, "");

    private Library(Name alias, Table<LibraryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Library(Name alias, Table<LibraryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.library</code> table reference
     */
    public Library(String alias) {
        this(DSL.name(alias), LIBRARY);
    }

    /**
     * Create an aliased <code>public.library</code> table reference
     */
    public Library(Name alias) {
        this(alias, LIBRARY);
    }

    /**
     * Create a <code>public.library</code> table reference
     */
    public Library() {
        this(DSL.name("library"), null);
    }

    public <O extends Record> Library(Table<O> child, ForeignKey<O, LibraryRecord> key) {
        super(child, key, LIBRARY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LIBRARY_FILE_PATH_IDX);
    }

    @Override
    public UniqueKey<LibraryRecord> getPrimaryKey() {
        return Keys.LIBRARY_PKEY;
    }

    @Override
    public Library as(String alias) {
        return new Library(DSL.name(alias), this);
    }

    @Override
    public Library as(Name alias) {
        return new Library(alias, this);
    }

    @Override
    public Library as(Table<?> alias) {
        return new Library(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Library rename(String name) {
        return new Library(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Library rename(Name name) {
        return new Library(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Library rename(Table<?> name) {
        return new Library(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, OffsetDateTime, UUID, OffsetDateTime, UUID, String, String, OffsetDateTime, OffsetDateTime, LibraryStatus, LibraryBackend, MediaType, ExternalAgentStrategy> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super UUID, ? super OffsetDateTime, ? super UUID, ? super OffsetDateTime, ? super UUID, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super LibraryStatus, ? super LibraryBackend, ? super MediaType, ? super ExternalAgentStrategy, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super UUID, ? super OffsetDateTime, ? super UUID, ? super OffsetDateTime, ? super UUID, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super LibraryStatus, ? super LibraryBackend, ? super MediaType, ? super ExternalAgentStrategy, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
