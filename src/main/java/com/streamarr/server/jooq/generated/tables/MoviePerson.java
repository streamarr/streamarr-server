/*
 * This file is generated by jOOQ.
 */
package com.streamarr.server.jooq.generated.tables;


import com.streamarr.server.jooq.generated.Keys;
import com.streamarr.server.jooq.generated.Public;
import com.streamarr.server.jooq.generated.tables.records.MoviePersonRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MoviePerson extends TableImpl<MoviePersonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.movie_person</code>
     */
    public static final MoviePerson MOVIE_PERSON = new MoviePerson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MoviePersonRecord> getRecordType() {
        return MoviePersonRecord.class;
    }

    /**
     * The column <code>public.movie_person.id</code>.
     */
    public final TableField<MoviePersonRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.movie_person.created_on</code>.
     */
    public final TableField<MoviePersonRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.movie_person.movie_id</code>.
     */
    public final TableField<MoviePersonRecord, UUID> MOVIE_ID = createField(DSL.name("movie_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.movie_person.person_id</code>.
     */
    public final TableField<MoviePersonRecord, UUID> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.UUID.nullable(false), this, "");

    private MoviePerson(Name alias, Table<MoviePersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private MoviePerson(Name alias, Table<MoviePersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.movie_person</code> table reference
     */
    public MoviePerson(String alias) {
        this(DSL.name(alias), MOVIE_PERSON);
    }

    /**
     * Create an aliased <code>public.movie_person</code> table reference
     */
    public MoviePerson(Name alias) {
        this(alias, MOVIE_PERSON);
    }

    /**
     * Create a <code>public.movie_person</code> table reference
     */
    public MoviePerson() {
        this(DSL.name("movie_person"), null);
    }

    public <O extends Record> MoviePerson(Table<O> child, ForeignKey<O, MoviePersonRecord> key) {
        super(child, key, MOVIE_PERSON);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MoviePersonRecord> getPrimaryKey() {
        return Keys.MOVIE_PERSON_PKEY;
    }

    @Override
    public List<ForeignKey<MoviePersonRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MOVIE_PERSON__MOVIE_PERSON_MOVIE_ID_FKEY, Keys.MOVIE_PERSON__MOVIE_PERSON_PERSON_ID_FKEY);
    }

    private transient Movie _movie;
    private transient Person _person;

    /**
     * Get the implicit join path to the <code>public.movie</code> table.
     */
    public Movie movie() {
        if (_movie == null)
            _movie = new Movie(this, Keys.MOVIE_PERSON__MOVIE_PERSON_MOVIE_ID_FKEY);

        return _movie;
    }

    /**
     * Get the implicit join path to the <code>public.person</code> table.
     */
    public Person person() {
        if (_person == null)
            _person = new Person(this, Keys.MOVIE_PERSON__MOVIE_PERSON_PERSON_ID_FKEY);

        return _person;
    }

    @Override
    public MoviePerson as(String alias) {
        return new MoviePerson(DSL.name(alias), this);
    }

    @Override
    public MoviePerson as(Name alias) {
        return new MoviePerson(alias, this);
    }

    @Override
    public MoviePerson as(Table<?> alias) {
        return new MoviePerson(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MoviePerson rename(String name) {
        return new MoviePerson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MoviePerson rename(Name name) {
        return new MoviePerson(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MoviePerson rename(Table<?> name) {
        return new MoviePerson(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, OffsetDateTime, UUID, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super OffsetDateTime, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super OffsetDateTime, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
