/*
 * This file is generated by jOOQ.
 */
package com.streamarr.server.jooq.generated.tables;


import com.streamarr.server.jooq.generated.Keys;
import com.streamarr.server.jooq.generated.Public;
import com.streamarr.server.jooq.generated.tables.records.MovieRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Movie extends TableImpl<MovieRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.movie</code>
     */
    public static final Movie MOVIE = new Movie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieRecord> getRecordType() {
        return MovieRecord.class;
    }

    /**
     * The column <code>public.movie.id</code>.
     */
    public final TableField<MovieRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.movie.backdrop_path</code>.
     */
    public final TableField<MovieRecord, String> BACKDROP_PATH = createField(DSL.name("backdrop_path"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.movie.poster_path</code>.
     */
    public final TableField<MovieRecord, String> POSTER_PATH = createField(DSL.name("poster_path"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.movie.tagline</code>.
     */
    public final TableField<MovieRecord, String> TAGLINE = createField(DSL.name("tagline"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.movie.summary</code>.
     */
    public final TableField<MovieRecord, String> SUMMARY = createField(DSL.name("summary"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.movie.content_rating</code>.
     */
    public final TableField<MovieRecord, String> CONTENT_RATING = createField(DSL.name("content_rating"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.movie.release_date</code>.
     */
    public final TableField<MovieRecord, LocalDate> RELEASE_DATE = createField(DSL.name("release_date"), SQLDataType.LOCALDATE, this, "");

    private Movie(Name alias, Table<MovieRecord> aliased) {
        this(alias, aliased, null);
    }

    private Movie(Name alias, Table<MovieRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.movie</code> table reference
     */
    public Movie(String alias) {
        this(DSL.name(alias), MOVIE);
    }

    /**
     * Create an aliased <code>public.movie</code> table reference
     */
    public Movie(Name alias) {
        this(alias, MOVIE);
    }

    /**
     * Create a <code>public.movie</code> table reference
     */
    public Movie() {
        this(DSL.name("movie"), null);
    }

    public <O extends Record> Movie(Table<O> child, ForeignKey<O, MovieRecord> key) {
        super(child, key, MOVIE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MovieRecord> getPrimaryKey() {
        return Keys.MOVIE_PKEY;
    }

    @Override
    public List<ForeignKey<MovieRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MOVIE__FK_MOVIE);
    }

    private transient BaseCollectable _baseCollectable;

    /**
     * Get the implicit join path to the <code>public.base_collectable</code>
     * table.
     */
    public BaseCollectable baseCollectable() {
        if (_baseCollectable == null)
            _baseCollectable = new BaseCollectable(this, Keys.MOVIE__FK_MOVIE);

        return _baseCollectable;
    }

    @Override
    public Movie as(String alias) {
        return new Movie(DSL.name(alias), this);
    }

    @Override
    public Movie as(Name alias) {
        return new Movie(alias, this);
    }

    @Override
    public Movie as(Table<?> alias) {
        return new Movie(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Movie rename(String name) {
        return new Movie(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Movie rename(Name name) {
        return new Movie(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Movie rename(Table<?> name) {
        return new Movie(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, String, String, String, String, LocalDate> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
